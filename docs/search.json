[
  {
    "objectID": "coverage_amount.html",
    "href": "coverage_amount.html",
    "title": "Amount of Coverage",
    "section": "",
    "text": "Rendered at 12:48 PM, Feb. 20, 2023\nRyan Thornburg (ryan.thornburg@unc.edu)"
  },
  {
    "objectID": "coverage_amount.html#how-much-coverage-did-each-non-incumbent-receive",
    "href": "coverage_amount.html#how-much-coverage-did-each-non-incumbent-receive",
    "title": "Amount of Coverage",
    "section": "How much coverage did each non-incumbent receive?",
    "text": "How much coverage did each non-incumbent receive?\n\n\nCode\narticles_per_ninc<- non_incumbents %>% \n  filter(duplicative_publication_of_previous_article == \"0\") %>%\n  group_by(state, contest, candidate_name) %>% \n  summarize(articles = n()) %>% \n  arrange(desc(articles))\n\narticles_per_ninc %>% \n  ggplot(aes(x = articles,\n             y=reorder(candidate_name, articles))\n  ) +\n  geom_col(fill=\"#4B9CD3\") +\n    scale_x_continuous(breaks=seq(0,350,50), limits=c(0,350)) +\n\n  geom_vline(aes(xintercept = median(articles)), color=\"#952e46\") +\n  geom_text(aes(x=median(articles), \n                y=2,\n                label= paste0(\"Median mentions per non-incumbent: \", median(articles))\n                ),\n            color=\"#952e46\",\n            nudge_x = 120, \n            show.legend = FALSE\n            ) +\n  labs(title = \"Non-incumbent Media Mentions\") + \n  xlab(\"Number of mentions\") +\n  ylab(NULL) +\n  theme_classic() +\n  theme(plot.margin = unit(c(0,0,0,0), \"cm\")) +\n  theme(axis.ticks = element_blank() ) +\n  theme(axis.line.y = element_blank()) +\n  theme(text = element_text(family=\"sans\", \n  size = 9, \n  color = \"#3f2b56\")) +\n  theme(title = element_text(family = \"serif\", size = 16.2))+\n  theme(axis.title.x = element_text(family = \"sans\", size = 12.15)) +\n  theme(axis.text.y = element_text(family = \"sans\", size = 12.15))\n\n\n\n\n\n\n\nCode\ndatatable(articles_per_ninc,\n          options = list(dom='t',\n                         pageLength = 27),\n            colnames = c('State', 'Contest', 'Candidate', 'Articles'),\n          rownames = FALSE,\n          filter='top')"
  },
  {
    "objectID": "coverage_amount.html#comparing-mentions-of-incumbents-and-challengers-for-each-contest",
    "href": "coverage_amount.html#comparing-mentions-of-incumbents-and-challengers-for-each-contest",
    "title": "Amount of Coverage",
    "section": "Comparing mentions of incumbents and challengers for each contest",
    "text": "Comparing mentions of incumbents and challengers for each contest\n\n\nCode\nall_mentions %>%\n  group_by(state, contest, candidate_status) %>% \n  summarize(mentions = n()) %>% \n  mutate(mentions = case_when(\n    contest == \"Butler\" ~ 0,\n    TRUE ~ as.numeric(mentions))\n    ) %>% \n  pivot_wider(\n              names_from = candidate_status,\n              values_from = mentions) %>%\n  replace_na(list(incumbent = 0, challenger = 0)) %>%\n  datatable(\n          options = list(dom='t',\n                         pageLength = 27),\n            colnames = c('State', 'Contest', 'Incumbent mentions', 'Challengers mentions'),\n          rownames = FALSE)"
  },
  {
    "objectID": "coverage_amount.html#median-mentions-for-candidates-by-incumbency-and-competitiveness",
    "href": "coverage_amount.html#median-mentions-for-candidates-by-incumbency-and-competitiveness",
    "title": "Amount of Coverage",
    "section": "Median mentions for candidates, by incumbency and competitiveness",
    "text": "Median mentions for candidates, by incumbency and competitiveness\n\n\nCode\nnincs_competitive <- nincs_for_binding %>% \n  left_join(competitiveness, by=c(\"state\", \"contest\")) %>%\n  select(state, contest, candidate_status, candidate_name, type) \n\nincs_competitive <- incs_for_binding %>%\n    left_join(competitiveness, by=c(\"state\", \"contest\")) %>%\n  select(state, contest, candidate_name, candidate_status, type)\n\nbind_rows(nincs_competitive, incs_competitive) %>%\n  group_by(state, contest, candidate_name, candidate_status, type) %>%\n  summarize(mentions = n()) %>%\n  as_tibble() %>%\n  group_by(candidate_status, type) %>%\n  summarize(median_mentions = median(mentions)) %>%\n  as_tibble() %>%\n  mutate(candidate_status = case_when(\n    candidate_status == \"challenger\" ~ \"All challengers in a contest\",\n    candidate_status == \"incumbent\" ~ \"Incumbent\"\n  )\n  ) %>% \n    pivot_wider(names_from = type,\n                values_from = median_mentions) %>%\n  \n        replace_na(list(uncontested = 0)) %>% \n    datatable(options = list(dom='t',\n                             order = list(1, 'desc')\n                             ),\n            colnames = c('Candidate Type', 'Contested','Open','Uncontested'),\n          rownames = FALSE)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Executive Summary",
    "section": "",
    "text": "Rendered at 12:19 PM, Feb. 26, 2023\nRyan Thornburg (ryan.thornburg@unc.edu)\nThis analysis accompanies the full report by Carissa Byrne Hessick and Amy Ullrick as part of the the Prosecutors and Politics Project at the UNC School of Law.\nCode for loading the data as well as additional information about the code and data is available on GitHub."
  },
  {
    "objectID": "index.html#how-many-articles-did-we-code",
    "href": "index.html#how-many-articles-did-we-code",
    "title": "Executive Summary",
    "section": "How many articles did we code?",
    "text": "How many articles did we code?\n\n\nCode\ninc_unique_articles <- incumbents %>% \n  filter(duplicative_publication_of_previous_article == \"0\")\n\nnrow(inc_unique_articles)\n\n\n[1] 1646\n\n\n1,646 articles that mention incumbents that are coded as unique.\n\n\nCode\nninc_unique_articles <- non_incumbents %>% filter(duplicative_publication_of_previous_article == \"0\" & duplicative_of_incumbent_article == \"0\")\n\nnrow(ninc_unique_articles)\n\n\n[1] 328\n\n\n328 articles that mention non-incumbents that are coded as unique.\nWe did not determine whether an article was unique across the whole data set. For example, if an article mentions two different challengers, it would appear in our data twice."
  },
  {
    "objectID": "index.html#what-types-of-articles-did-we-have",
    "href": "index.html#what-types-of-articles-did-we-have",
    "title": "Executive Summary",
    "section": "What types of articles did we have?",
    "text": "What types of articles did we have?\n1 = news story\n2 = opinion or editorial\n3 = letter to the editor\n4 = advertisement/notification\n99 = other\n\n\nCode\ncombined_unique_articles <- bind_rows(inc_unique_articles, ninc_unique_articles) \n\ncombined_unique_articles %>%\n    tabyl(type_of_article) %>%\n  datatable(options = list(dom='t'),\n            rownames = FALSE,\n            colnames = c('Type', '# of articles', '% of articles')) %>%\n  formatPercentage('percent', 2) %>%\n  formatRound('n', digits = 0)"
  },
  {
    "objectID": "index.html#how-competitive-was-each-contest-we-analyzed",
    "href": "index.html#how-competitive-was-each-contest-we-analyzed",
    "title": "Executive Summary",
    "section": "How competitive was each contest we analyzed?",
    "text": "How competitive was each contest we analyzed?\nNote: In Lake County, Oregon, there was no incumbent following the resignation of the previous district attorney in 2018. In other contests marked as “open,” the incumbent did not run but did receive news coverage.\n\n\nCode\ncompetitiveness %>%\n  select(state, contest, type, incumbents, non_incumbents) %>% \n  datatable(options = list(dom='t',\n                         pageLength = 27),\n            colnames = c('State', 'Contest', 'Competitiveness', 'Incumbents', 'Challengers'),\n          rownames = FALSE)"
  },
  {
    "objectID": "coverage_amount.html#how-much-coverage-did-each-incumbent-receive",
    "href": "coverage_amount.html#how-much-coverage-did-each-incumbent-receive",
    "title": "Amount of Coverage",
    "section": "How much coverage did each incumbent receive?",
    "text": "How much coverage did each incumbent receive?\n\n\nCode\narticles_per_prosecutor<- incumbents %>% \n  filter(duplicative_publication_of_previous_article == \"0\" |\n           #Next line because of Devinney had no articles\n           is.na(duplicative_publication_of_previous_article)) %>%\n    mutate(prosecutor_name = case_when(\n    prosecutor_name == \"John J. Flynn\" ~ \"Flynn, John J.\",\n    prosecutor_name == \"Devinney\" ~ \"Devinney, Darrin C.\",\n    TRUE ~ prosecutor_name)\n    \n    ) %>%\n  group_by(state, contest, prosecutor_name) %>%\n  summarize(articles = n()) %>%\n  mutate(articles = case_when(\n    prosecutor_name == \"Devinney\" ~ 0,\n    prosecutor_name != \"Devinney\" ~ as.numeric(articles)\n  )\n  ) %>% \n  arrange(desc(articles))\n\n\ng1 <- articles_per_prosecutor %>% \n  ggplot(aes(x = articles,\n             y=reorder(prosecutor_name, articles), \n             text = paste(\"articles: \",articles)\n             )\n         ) +\n  geom_col(fill=\"#4B9CD3\") +\n    scale_x_continuous(breaks=seq(0,350,50), limits=c(0,350)) +\n\n  geom_vline(aes(xintercept = median(articles)), color=\"#952e46\") +\n  geom_text(aes(x=median(articles), \n                y=2,\n                label= paste0(\"Median mentions per incumbent: \", median(articles))\n                ),\n            color=\"#952e46\",\n            nudge_x = 120, \n            show.legend = FALSE\n            ) +\n  labs(title = \"Incumbent Media Mentions\") + \n  xlab(\"Number of mentions\") +\n  ylab(NULL) +\n  theme_classic() +\n  theme(plot.margin = unit(c(0,0,0,0), \"cm\")) +\n  theme(axis.ticks = element_blank() ) +\n  theme(axis.line.y = element_blank()) +\n  theme(text = element_text(family=\"sans\", \n  size = 9, \n  color = \"#3f2b56\")) +\n  theme(title = element_text(family = \"serif\", size = 16.2))+\n  theme(axis.title.x = element_text(family = \"sans\", size = 12.15)) +\n  theme(axis.text.y = element_text(family = \"sans\", size = 12.15))\n\ng1\n\n\n\n\n\n\n\nCode\ndatatable(articles_per_prosecutor,\n          options = list(dom='t',\n                         pageLength = 27),\n            colnames = c('State', 'Contest', 'Prosecutor', 'Articles'),\n          rownames = FALSE,\n          filter = 'top')"
  },
  {
    "objectID": "index.html#which-state-and-contests-did-we-cover",
    "href": "index.html#which-state-and-contests-did-we-cover",
    "title": "Executive Summary",
    "section": "Which state and contests did we cover?",
    "text": "Which state and contests did we cover?\n\n\nCode\nall_mentions %>% \n  group_by(state, contest) %>%\n  summarize(mentions=n())  %>% \n  mutate(mentions = case_when(\n    contest == \"Butler\" ~ 0,\n    TRUE ~ as.numeric(mentions))\n    ) %>%\n  datatable(options = list(dom='t',\n                         pageLength = 27),\n            colnames = c('State', 'Contest', 'Mentions'),\n          rownames = FALSE)"
  },
  {
    "objectID": "coverage_content.html",
    "href": "coverage_content.html",
    "title": "Content of Coverage",
    "section": "",
    "text": "Rendered at 06:39 PM, Feb. 21, 2023\nRyan Thornburg (ryan.thornburg@unc.edu)"
  },
  {
    "objectID": "coverage_content.html#depth-of-mention-for-incumbents",
    "href": "coverage_content.html#depth-of-mention-for-incumbents",
    "title": "Content of Coverage",
    "section": "Depth of Mention for Incumbents",
    "text": "Depth of Mention for Incumbents\n1 = Mention in passing (1 mention)\n2 = Mention and includes some detail/discussion (2-3 mentions)\n3 = In depth detail/discussion (more than 3 mentions or significant discussion of office/policy)\n\n\nCode\ninc_unique_articles %>% \n  filter(type_of_prosecutor_mention %in% c(\"1\",\"2\",\"3\")) %>%\n  group_by(type_of_prosecutor_mention) %>%\n  summarize (articles=n()) %>%\n  mutate(percentage = scales::percent(articles / sum(articles)))\n\n\n# A tibble: 3 × 3\n  type_of_prosecutor_mention articles percentage\n  <chr>                         <int> <chr>     \n1 1                               739 45%       \n2 2                               545 33%       \n3 3                               356 22%"
  },
  {
    "objectID": "coverage_content.html#depth-of-mention-for-non-incumbents",
    "href": "coverage_content.html#depth-of-mention-for-non-incumbents",
    "title": "Content of Coverage",
    "section": "Depth of Mention for Non-incumbents",
    "text": "Depth of Mention for Non-incumbents\n\n\nCode\nninc_unique_articles %>% \n  filter(type_of_candidate_mention %in% c(\"1\",\"2\",\"3\")) %>%\n  group_by(type_of_candidate_mention) %>%\n  summarize (articles=n()) %>%\n  mutate(percentage = scales::percent(articles / sum(articles))) \n\n\n# A tibble: 3 × 3\n  type_of_candidate_mention articles percentage\n  <chr>                        <int> <chr>     \n1 1                              146 45%       \n2 2                               71 22%       \n3 3                              111 34%"
  },
  {
    "objectID": "coverage_content.html#focus-of-incumbents-coverage",
    "href": "coverage_content.html#focus-of-incumbents-coverage",
    "title": "Content of Coverage",
    "section": "Focus of Incumbents’ Coverage",
    "text": "Focus of Incumbents’ Coverage\n0 = neither is mentioned\n1 = case-specific/particular prosecutor decision mentioned (describe in notes)\n2 = general/office-wide prosecutor policy mentioned (describe in notes)\nNote that we accepted multiple values for each article. So we have a total of 1,698 focuses for the 1,646 articles that mention an incumbent prosecutor.\n\n\nCode\ninc_unique_articles %>%\n  mutate(code_1 = case_when(str_detect(primary_focus_of_article,\"1\") ~ 1,\n                            TRUE ~ 0),\n         code_2 = case_when(str_detect(primary_focus_of_article,\"2\") ~ 1,\n                            TRUE ~ 0),\n         code_3 = case_when(str_detect(primary_focus_of_article,\"3\") ~ 1,\n                            TRUE ~ 0),\n         code_4 = case_when(str_detect(primary_focus_of_article,\"4\") ~ 1,\n                            TRUE ~ 0),\n         code_5 = case_when(str_detect(primary_focus_of_article,\"5\") ~ 1,\n                            TRUE ~ 0),\n         code_99 = case_when(str_detect(primary_focus_of_article,\"99\") ~ 1,\n#NOTE: We had one article coded \"0\", which was not a valid code                             \n                             str_detect(primary_focus_of_article,\"0\") ~ 1,\n                             TRUE ~ 0),\n         ) %>% \nselect(2,1, starts_with(c(\"primary\",\"code_\"))) %>%\n  select(1,2,starts_with(\"code_\")) %>%\n  summarize(across(starts_with(\"code_\"),sum)) %>%\n  rename(specific_crime_case = code_1,\n         category_crimes_cases = code_2,\n         prosecutor = code_3,\n         election = code_4,\n         justice_system_general = code_5,\n         other = code_99) %>%\n  pivot_longer(1:6, names_to = \"primary_focus\", values_to = \"articles\") %>% \n  arrange(desc(articles)) %>%\n  adorn_percentages(\"col\") %>%\n  adorn_pct_formatting() %>%\n  datatable(options = list(dom='t'),\n            colnames = c('Focus', '% of Mentions'),\n          rownames = FALSE)"
  },
  {
    "objectID": "coverage_content.html#types-of-crimes-discussed",
    "href": "coverage_content.html#types-of-crimes-discussed",
    "title": "Content of Coverage",
    "section": "Types of Crimes Discussed",
    "text": "Types of Crimes Discussed\nA single article can discuss multiple types of crimes, so this shows the number of time each crime is mentioned. Use 1,646 articles as the denominator to determine the percentage of articles that discuss a certain crime.\n\n\nCode\ninc_unique_articles %>%\n  mutate(\n    code_0 = case_when(str_detect(type_of_crime_discussed,\"^0\") ~ TRUE),\n    code_1 = case_when(str_detect(type_of_crime_discussed,\"^1$|^1[:punct:]|\\\\s1[:punct:]|[:punct:]1[:punct:]|\\\\s1$|[:punct:]1$\") ~ TRUE),\n    code_2 = case_when(str_detect(type_of_crime_discussed,\"^2$|^2[:punct:]|\\\\s2[:punct:]|[:punct:]2[:punct:]|\\\\s2$|[:punct:]2$\") ~ TRUE),\n    code_3 = case_when(str_detect(type_of_crime_discussed,\"^3$|^3[:punct:]|\\\\s3[:punct:]|[:punct:]3[:punct:]|\\\\s3$|[:punct:]3$\") ~ TRUE),\n    code_4 = case_when(str_detect(type_of_crime_discussed,\"^4$|^4[:punct:]|\\\\s4[:punct:]|[:punct:]4[:punct:]|\\\\s4$|[:punct:]4$\") ~ TRUE),\n    code_5 = case_when(str_detect(type_of_crime_discussed,\"5\") ~ TRUE),\n    code_6 = case_when(str_detect(type_of_crime_discussed,\"6\") ~ TRUE),\n    code_7 = case_when(str_detect(type_of_crime_discussed,\"7\") ~ TRUE),\n    code_8 = case_when(str_detect(type_of_crime_discussed,\"8\") ~ TRUE),\n    code_9 = case_when(str_detect(type_of_crime_discussed,\"^9$|^9[:punct:]|\\\\s9[:punct:]|[:punct:]9[:punct:]|\\\\s9$|[:punct:]9$\") ~ TRUE),\n    code_10 = case_when(str_detect(type_of_crime_discussed,\"10\") ~ TRUE),\n    code_11 = case_when(str_detect(type_of_crime_discussed,\"11\") ~ TRUE),\n    code_12 = case_when(str_detect(type_of_crime_discussed,\"12\") ~ TRUE),\n    code_13 = case_when(str_detect(type_of_crime_discussed,\"13\") ~ TRUE),\n    code_14 = case_when(str_detect(type_of_crime_discussed,\"14\") ~ TRUE),\n    code_99 = case_when(str_detect(type_of_crime_discussed,\"99\") ~ TRUE)\n  ) %>% \n  select(state, contest, prosecutor_name, news_story_number, type_of_crime_discussed, starts_with(\"code\")) %>% \n  rename(\n    \"None\" = \"code_0\",\n    \"Homicide\" = \"code_1\",\n    \"Robbery\" = \"code_2\",\n    \"Rape/Sexual Assault\"= \"code_3\",\n    \"Arson\"= \"code_4\",\n    \"Burglary\"= \"code_5\",\n    \"Kidnapping\"= \"code_6\",\n    \"Theft/looting\"= \"code_7\",\n    \"Drunk driving\"= \"code_8\",\n    \"Domestic violence\"= \"code_9\",\n    \"Drug crimes\"= \"code_10\",\n    \"Shootings/gun crimes\"= \"code_11\",\n    \"Violent crime, broadly\"= \"code_12\",\n    \"Nonviolent crime, broadly\"= \"code_13\",\n    \"Property crime, broadly\"= \"code_14\",\n    \"Other\"= \"code_99\"\n  ) %>%\n  pivot_longer(!c(state, contest, prosecutor_name, news_story_number, type_of_crime_discussed),\n               names_to = \"code\",\n               values_to = \"exists\") %>%\n  tabyl(code,exists) %>%\n  select(code, `TRUE`) %>% \n  rename(c(crime= code, mentions = `TRUE`)) %>%\n  arrange(-mentions) %>%\n  datatable(options = list(dom='t'),\n            colnames = c('Crime', 'Total Mentions'),\n          rownames = FALSE)"
  },
  {
    "objectID": "coverage_content.html#crime-rates",
    "href": "coverage_content.html#crime-rates",
    "title": "Content of Coverage",
    "section": "Crime Rates",
    "text": "Crime Rates\n0 = Not mentioned\n1 = Mentioned about increasing rate\n2 = Mentioned about decreasing rate\n3 = Mentions both increases and decreases\n\n\nCode\ninc_unique_articles['discussion_of_crime_rates'][inc_unique_articles['discussion_of_crime_rates'] == \"0\"] <- \"No Mention\"\n\ninc_unique_articles['discussion_of_crime_rates'][inc_unique_articles['discussion_of_crime_rates'] == \"1\"] <- \"Increasing\"\n\ninc_unique_articles['discussion_of_crime_rates'][inc_unique_articles['discussion_of_crime_rates'] == \"2\"] <- \"Decreasing\"\n\ninc_unique_articles['discussion_of_crime_rates'][inc_unique_articles['discussion_of_crime_rates'] == \"3\"] <- \"Both\"\n\n   inc_unique_articles %>%\n     group_by(discussion_of_crime_rates) %>%\n     summarize(articles=n()) %>%\n     mutate(pct = scales::percent(articles / sum(articles))) %>%\n     arrange(-articles) %>%\n     datatable(options = list(dom='t'),\n               colnames = c('Code', 'Articles', '% of Articles'),\n               rownames = FALSE)"
  },
  {
    "objectID": "coverage_content.html#tone-of-crime-rate-coverage",
    "href": "coverage_content.html#tone-of-crime-rate-coverage",
    "title": "Content of Coverage",
    "section": "Tone of Crime Rate Coverage",
    "text": "Tone of Crime Rate Coverage\n0 = neutral\n1 = expressing concern\n2 = reassuring\n3 = includes both expressions of concern and reassurance\n99 = not applicable\nNote: Omits four articles with invalid codes for tone of coverage.\n\n\n# A tibble: 4 × 23\n  news_sto…¹ prose…² date_of_article     title…³ name_…⁴ name_…⁵ type_…⁶ dupli…⁷\n  <chr>      <chr>   <dttm>              <chr>   <chr>   <chr>   <chr>   <chr>  \n1 9          \"Adel,… 2020-01-31 00:00:00 No cri… 3 KTVK… Burkit… 1       0      \n2 72         \"Adel,… 2020-02-01 00:00:00 No cha… The Ar… <NA>    1       0      \n3 510        \"John … 2020-02-15 00:00:00 Modify… Buffal… News E… 2       0      \n4 1          \"Wojta… 2020-01-05 00:00:00 Wojtas… Niagar… Pfeiff… 1       0      \n# … with 15 more variables: x_subj_duplicate_only <chr>,\n#   length_of_article <chr>, primary_focus_of_article <chr>,\n#   election_referenced_in_article <chr>, type_of_prosecutor_mention <chr>,\n#   type_of_crime_discussed <chr>, discussion_of_crime_rates <chr>,\n#   discussion_of_prosecutorial_decision_or_policy <chr>,\n#   tenor_tone_of_article_re_prosecutor <chr>,\n#   tenor_tone_of_article_re_crime_or_crime_rates <chr>, notes <chr>, …\n\n\n\n\nCode\ninc_unique_articles %>%\n  filter(tenor_tone_of_article_re_crime_or_crime_rates %in% c(\"0\",\"1\",\"2\",\"3\",\"99\")) %>%\n  tabyl(discussion_of_crime_rates\n    ,tenor_tone_of_article_re_crime_or_crime_rates)%>%\n       datatable(options = list(dom='t'),\n               colnames = c('', 'Neutral','Concern','Reassuring', 'Both','NA'),\n               rownames = FALSE)"
  },
  {
    "objectID": "coverage_content.html#mention-of-election",
    "href": "coverage_content.html#mention-of-election",
    "title": "Content of Coverage",
    "section": "Mention of Election",
    "text": "Mention of Election\n0 = not mentioned at all\n1 = mentioned in passing\n2 = mentioned with limited discussion\n3 = mentioned with discussion of platforms/policies\n\n\nCode\ninc_unique_articles %>%\n#exclude 10 articles with invalid coding\n  filter(election_referenced_in_article != \"99\") %>%\n tabyl(election_referenced_in_article) %>%\n  adorn_pct_formatting() %>%\n       datatable(options = list(dom='t'),\n               colnames = c('Code', 'Articles','Percent'),\n               rownames = FALSE)\n\n\n\n\n\n\n\n\nCoverage by Competitiveness\n\n\nCode\ncompetitiveness %>%\n    filter(type != \"open\") %>%\n  left_join(inc_unique_articles, by = c(\"state\", \"contest\")) %>%\n#exclude 11 articles with invalid coding \n    filter(election_referenced_in_article != \"99\", !is.na(election_referenced_in_article)) %>%  \n tabyl(election_referenced_in_article) %>%\n  adorn_pct_formatting() %>%\n       datatable(options = list(dom='t'),\n               colnames = c('Competitiveness', 'Articles','Percent'),\n               rownames = FALSE)"
  },
  {
    "objectID": "coverage_content.html#winning-incumbent-no-coverage",
    "href": "coverage_content.html#winning-incumbent-no-coverage",
    "title": "Content of Coverage",
    "section": "Winning Incumbent; No Coverage",
    "text": "Winning Incumbent; No Coverage\n“One candidate (A. Felton, Polk County, OR) was mentioned in\neight separate articles, none of which mentioned that he was up for reelection;\nhe ran unopposed and won.” See Full Report\n\n\nCode\ninc_unique_articles%>%\n  #exclude 11 articles with invalid coding \n    filter(election_referenced_in_article != \"99\", !is.na(election_referenced_in_article)) %>%\n  tabyl(prosecutor_name, election_referenced_in_article) %>%\n       datatable(options = list(dom='t',\n                                pageLength = 27,\n                                order = list(list(4, 'asc'),\n                                             list(3,'asc'),\n                                             list(2, 'asc'))\n                                ),\n               colnames = c('Prosecutor', 'No Election Mention','Passing Mention','Limited Discussion','In Depth'),\n               rownames = FALSE)"
  },
  {
    "objectID": "coverage_content.html#mentions-of-decisions-or-policies-of-incumbents",
    "href": "coverage_content.html#mentions-of-decisions-or-policies-of-incumbents",
    "title": "Content of Coverage",
    "section": "Mentions of Decisions or Policies of Incumbents",
    "text": "Mentions of Decisions or Policies of Incumbents\n0 = neither is mentioned\n1 = case-specific/particular prosecutor decision mentioned (describe in notes)\n2 = general/office-wide prosecutor policy mentioned (describe in notes)\nNOTE: This table looks only at prosecutors running for re-election.\n\n\nCode\ninc_unique_articles %>%\n  left_join(competitiveness, by=c(\"state\", \"contest\")) %>%\n  filter(type !=\"open\") %>%\n  mutate(discussion_of_prosecutorial_decision_or_policy = \n           case_when(discussion_of_prosecutorial_decision_or_policy == \"0\" ~ \"neither\",\n                     str_detect(discussion_of_prosecutorial_decision_or_policy,\";\") ~ \"both\",\n         str_detect(discussion_of_prosecutorial_decision_or_policy,\"1\") ~ \"decision\",\n         str_detect(discussion_of_prosecutorial_decision_or_policy,\"2\") ~ \"policy\",\n         str_detect(discussion_of_prosecutorial_decision_or_policy,\"General policy\") ~ \"policy\"\n         \n)\n) %>%\n  select(discussion_of_prosecutorial_decision_or_policy) %>%\n  tabyl(discussion_of_prosecutorial_decision_or_policy)  %>% adorn_pct_formatting() %>%\n  datatable(options = list(dom='t',\n                                order =  list(2, 'desc')\n                                ),\n               colnames = c('', 'Articles','% Articles'),\n               rownames = FALSE)"
  },
  {
    "objectID": "coverage_content.html#mentions-of-background-or-platforms-of-non-incumbents",
    "href": "coverage_content.html#mentions-of-background-or-platforms-of-non-incumbents",
    "title": "Content of Coverage",
    "section": "Mentions of Background or Platforms of Non-Incumbents",
    "text": "Mentions of Background or Platforms of Non-Incumbents\n\n\nCode\nnon_incumbents %>%\n    filter(duplicative_publication_of_previous_article == \"0\") %>%\n  group_by(candidate_name, candidate_background_or_platform) %>%\n  summarize(articles = n()) %>%\n  mutate(candidate_background_or_platform = case_when(\n    candidate_background_or_platform == \"0\" ~ \"neither\",\n    candidate_background_or_platform == \"1\" ~ \"background_only\",\n    candidate_background_or_platform == \"2\" ~ \"platform_only\",\n    candidate_background_or_platform == \"3\" ~ \"both\")) %>%\n  pivot_wider(names_from = candidate_background_or_platform, values_from = articles) %>%\n   replace_na(list(neither = 0,\n                   platform_only = 0,\n                   background_only = 0,\n                   both = 0\n   )\n   ) %>%\n  adorn_percentages() %>%\n  arrange(desc(neither)) %>%\n  adorn_pct_formatting() %>%\n  datatable(\n            options(list(dom='t',\n                         pageLength = 21)),\n               colnames = c('Candidate',\n                            'Neither',\n                            'Platform',\n                            'Background',\n                            'Both'),\n               rownames = FALSE)"
  },
  {
    "objectID": "index.html#which-states-and-contests-did-we-cover",
    "href": "index.html#which-states-and-contests-did-we-cover",
    "title": "Executive Summary",
    "section": "Which states and contests did we cover?",
    "text": "Which states and contests did we cover?\n\n\nCode\nall_mentions %>% \n  group_by(state, contest) %>%\n  summarize(mentions=n())  %>% \n  mutate(mentions = case_when(\n    contest == \"Butler\" ~ 0,\n    TRUE ~ as.numeric(mentions))\n    ) %>%\n  datatable(options = list(dom='t',\n                         pageLength = 27),\n            colnames = c('State', 'Contest', 'Mentions'),\n          rownames = FALSE)"
  },
  {
    "objectID": "coverage_tone.html",
    "href": "coverage_tone.html",
    "title": "Tone of Coverage",
    "section": "",
    "text": "Rendered at 12:03 PM, Feb. 26, 2023\nRyan Thornburg (ryan.thornburg@unc.edu)"
  },
  {
    "objectID": "coverage_tone.html#overall-most-media-coverage-was-neutral.",
    "href": "coverage_tone.html#overall-most-media-coverage-was-neutral.",
    "title": "Tone of Coverage",
    "section": "Overall, most media coverage was neutral.",
    "text": "Overall, most media coverage was neutral.\n0 = neutral\n1 = positive\n2 = negative\n3 = includes both positive and negative\n\n\nCode\nall_mentions %>% \n  select(2:5, 1, tenor_tone_of_article_re_candidate) %>%\n  filter(!is.na(tenor_tone_of_article_re_candidate)) %>%\n  #filter(tenor_tone_of_article_re_candidate %in% c(\"0\",\"1\",\"2\")) %>%\n  tabyl(tenor_tone_of_article_re_candidate) %>%\n  adorn_pct_formatting() %>%\n  datatable(options = list(dom='t'),\n          colnames = c('Tone', 'Articles', 'Percent'),\n        rownames = FALSE)"
  },
  {
    "objectID": "coverage_tone.html#article-tone-by-incumbents-vs.-challengers",
    "href": "coverage_tone.html#article-tone-by-incumbents-vs.-challengers",
    "title": "Tone of Coverage",
    "section": "Article Tone by Incumbents vs. Challengers",
    "text": "Article Tone by Incumbents vs. Challengers\n\n\nCode\nall_mentions %>%\n  select(2:5, 1, tenor_tone_of_article_re_candidate) %>%\n  filter(!is.na(tenor_tone_of_article_re_candidate)) %>%\n  #filter(tenor_tone_of_article_re_candidate %in% c(\"0\",\"1\",\"2\")) %>%\n  group_by(tenor_tone_of_article_re_candidate, candidate_status) %>%\n  summarize(Articles=n()) %>%\n  pivot_wider(names_from = \"candidate_status\", values_from = Articles) %>%\n  adorn_percentages(denominator = 'col') %>%\n  adorn_pct_formatting() %>%\n  datatable(options = list(dom='t'),\n          colnames = c('Tone', 'Challengers', 'Incumbents'),\n        rownames = FALSE)"
  },
  {
    "objectID": "coverage_tone.html#article-tone-for-each-candidate",
    "href": "coverage_tone.html#article-tone-for-each-candidate",
    "title": "Tone of Coverage",
    "section": "Article Tone for Each Candidate",
    "text": "Article Tone for Each Candidate\nFor this, I re-coded invalid codes as “both positive and negative.” Devinney is not included in this table because the candidate received no article mentions.\n\n\nCode\nall_tone<- all_mentions %>%\n  select(2:5, 1, tenor_tone_of_article_re_candidate) %>%\n  mutate(tenor_tone_of_article_re_candidate = \n           case_when(\n             str_detect(tenor_tone_of_article_re_candidate,\"0; 1; 2\") ~ \"3\",\n            str_detect(tenor_tone_of_article_re_candidate,\"3\") ~ \"3\",\n            str_detect(tenor_tone_of_article_re_candidate,\"1\") ~ \"1\",\n            str_detect(tenor_tone_of_article_re_candidate,\"2\") ~ \"2\",\n            str_detect(tenor_tone_of_article_re_candidate,\"0\") ~ \"0\"\n                     )) %>%\n  filter(!is.na(tenor_tone_of_article_re_candidate)) %>%\n           group_by(state, contest, candidate_name, candidate_status,\n                    tenor_tone_of_article_re_candidate) %>%\n            summarize(Articles =n()) %>%\n  pivot_wider(names_from = tenor_tone_of_article_re_candidate,\n              names_prefix = \"code_\",\n              names_sort = TRUE,\n              values_from = Articles) %>%\n  mutate_if(is.numeric, replace_na, 0)\n\nall_tone %>% \n  datatable(\n          colnames = c('State', 'Contest', 'Canddiate', 'Status', 'Neutral Articles', 'Mostly Positive', 'Mostly Negative', 'Both'),\n        rownames = FALSE)"
  },
  {
    "objectID": "coverage_tone.html#candidates-who-received-the-most-negative-coverage.",
    "href": "coverage_tone.html#candidates-who-received-the-most-negative-coverage.",
    "title": "Tone of Coverage",
    "section": "Candidates who received the most negative coverage.",
    "text": "Candidates who received the most negative coverage.\n\n\nCode\nall_tone %>%\n    left_join(competitiveness, b = c(\"state\", \"contest\")) %>%\n  select(3:4,type,contains(\"code\"), 1:2) %>%\n    adorn_percentages(denominator = 'row') %>%\n  filter(code_2 > .05) %>%\n  arrange(desc(code_2) ) %>%\n  adorn_pct_formatting() %>%\n    datatable(list(pageLength = 16),\n          colnames = c('Candidate', 'Cand. Status', 'Compete Type', 'Neutral Articles', 'Mostly Positive', 'Mostly Negative', 'Both', 'State', 'Contest'),\n        rownames = FALSE)"
  }
]